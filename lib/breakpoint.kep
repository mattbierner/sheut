/**
 * @fileOverview Breakpoint record and breakpoint specific policies.
 */
package (
    Breakpoint,
    create,

// Base Policies
    unconditional,
    conditional)
with
    import 'bes::record' record,
    import 'atum::compute' {bind},
    import 'atum::compute::program' program,
    import 'atum::operations::boolean' {isTrue},
    
    import 'sheut::fun' {args, foldl},
    import 'sheut::run' {extract},
    import 'sheut::policy' {and, statementDgr, line, test},
    import 'sheut::state' {setBreakpoint},

    import 'sheut::operations::context' context
in {

/* Location Operations
 ******************************************************************************/
var containsLine = \location line ->
    (location.start.line <= line && line <= location.end.line);

var hasLine = \location line ->
    (location.start.line === line);

/* Breakpoint
 ******************************************************************************/
/**
 * Breakpoint record
 * 
 * @param test Policy that determines when this breakpoint is triggered. Policy
 *     is bound to the breakpoint when called.
 * @param ud Custom user data stored on the breakpoint.
 */
Breakpoint = record.declare(null, [
    'test',
    'ud',
    'update']);

Breakpoint.prototype.policy = \id =self->
    \current next previous -> {
        var r = self.test(current, next, previous);
        return ?r
            :setBreakpoint(next, id)
            :r;
    };

create = Breakpoint.create;

/* Base Policies
 ******************************************************************************/
/**
 * Test for a breakpoint that unconditionally breaks on a line.
 * 
 * @param line Line Number.
 */
unconditional = \line ->
    and(
        statementDgr,
        test \ current next previous ->
            extract(previous, context.location, false,
                \currentLocation ->
                    extract(next, context.location, false,
                        \nextLocation ->
                            ((!currentLocation || !hasLine(currentLocation, line)) &&
                                nextLocation &&
                                hasLine(nextLocation, line)))));

/**
 * Test for a breakpoint that conditionally breaks when a condition is satisfied.
 */
conditional = \prog -> let
    condition = bind(prog, isTrue)
in
    and(
        statementDgr,
        test \ _ next ->
            extract(next, condition, false));

}