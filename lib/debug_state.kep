/**
 * @fileOverview
 */
package (
    DebugState,
    createForDgr,
    
    isComplete,
    
    inject)
with
    import 'bes::record' record,
    
    import 'sheut::interpreter::debuggable' {CompleteDebuggable}
in {

/* DebugState
 ******************************************************************************/
/**
 * State of debugged program.
 * 
 * @param dgr Debuggable.
 * @param k Program continuation.
 * @param ctx Program context.
 * @param complete Is the computation complete?
 * 
 * @property depth The stack size of the continuation.
 */
DebugState = record.declare(null, [
    'dgr',
    'k',
    'ctx',
    'complete',
    'depth'],
    function \dgr k ctx complete previousLocation =self-> {
        self.dgr = dgr;
        self.k = k;
        self.ctx = ctx;
        self.complete = (complete || dgr instanceof CompleteDebuggable);
        self.depth = ?ctx.userData : ctx.userData.metadata.stack.length : 0;
    });

createForDgr = \dgr#{k, ctx} -> 
    DebugState.create(dgr, k, ctx, dgr instanceof CompleteDebuggable);

isComplete = (_ ?? .complete);

inject = \source, result ->
    source.setCtx(source.ctx.setValues(result.ctx.values));

}