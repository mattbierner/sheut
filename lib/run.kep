/**
 * @fileOverview
 */
package (
    execute,
    evaluate,
    extract,
    transform)
with
    import 'atum/compute/statement' statement,
    import 'atum/compute/program' program,
    import 'atum/interpret' interpret,
    
    import 'sheut/debug' {debugInitial, debug, 'execute': executeProgram},
    import 'sheut/state' {getResult}
in {

var ret = \x -> x;
var thr = \x -> { throw x; };

var finish = \args(...) -> {
    with
        import 'sheut/step' {finish}
    in {
        return finish.apply(null, args);
    }
};

/* Running
 ******************************************************************************/
/**
 * Run `p` in provide debug context.
 * 
 * Calls continuations with the resulting debugger state and result of computation.
 * 
 * @param d Debugger state.
 * @param p Computation.
 * @param ok Success continuation.
 * @param err Failure continuation.
 */
execute = \d, p, ok, err ->
    (debugInitial(p, d.debug.ctx, ok, err)
        |> finish
        |> getResult);

/**
 * Evaluate `p` in the given debug context,
 * 
 * @param d Debugger state.
 * @param p Computation,
 * @param [def] Default value to return when `p` fails.
 */
evaluate = \d, p, ok, err ->
    execute(
        d,
        p,
        (ok || ret),
        (err || thr));

/**
 * Evaluate `p` in the given debug context and return the result.
 * 
 * On failure, a default value is returned.
 * 
 * @param d Debugger state.
 * @param p Computation,
 * @param [def] Default value to return when `p` fails.
 * @param [ok] Optional callback to pass the result successful result through before returning it.
 */
extract = \d, p, def, ok ->
    execute(
        d,
        p,
        (ok || ret),
        \_, _ -> def);

/**
 * Evaluate `p` in the given debug context and return the next debug context
 * resulting from evaluation.
 * 
 * @param d Debugger state.
 * @param p Computation,
 * @param [ok] Success completion.
 * @param [err] Failure completion.
 */
transform = \d, p, ok, err ->
    (debugInitial(p, d.debug.ctx, ok, err)
        |> finish);

}