/**
 * @fileOverview Operations for accessing object values and properties in the
 * hosted language.
 */
package (
    getOwnPropertyNames
    getOwnProperties
    getPrototype
    get
    
    displayName)
with
    import 'atum::compute' {
        bind
        just
        enumerationa},
    import 'atum::builtin::object' {ObjectPrototypeToString},
    import 'atum::operations::error' {typeError},
    import 'atum::operations::func' {functionApply},
    import 'atum::operations::object' object,
    import 'atum::operations::value_reference' value_reference,
    import 'atum::value::value' {isObject},
    import 'atum::value::type' type,

    import 'sheut::fun' {foldl map},
    import 'sheut::operations::reference' {getFrom getValue}
in {

/**
 * Get a hosted array of property names for an object
 * 
 * @param obj Object reference.
 */
getOwnPropertyNames = object.getOwnPropertyNames;

/**
 * Get a hosted mapping of names to values for an object.
 * 
 * @param obj Object reference.
 */
getOwnProperties = \obj ->
    bind(
        getOwnPropertyNames(obj),
        \names ->
            bind(
                enumerationa <| map(get@obj, names),
                \values ->
                    just foldl(
                        \p name i -> {
                            p.(name) = values.(i);
                            return p;
                        },
                        {},
                        names)));

/**
 * Get the prototype of an object.
 */
getPrototype = \obj ->
    value_reference.dereference @ obj \ t ->
        ?isObject t
            :just t.proto
            :typeError();

/**
 * Get the value of a property on an object.
 * 
 * @param obj Object reference.
 * @param name Property name.
 */
get = object.get;

/**
 * 
 */
displayName = \val ->
    value_reference.dereference(val, \t, ref -> {
        switch (t.type) {
        case type.STRING:
        case type.NUMBER:
        case type.BOOLEAN:
            return just(t.value + '');

        case type.NULL:
            return just('null');

        case type.UNDEFINED:
            return just('undefined');
        
        case type.OBJECT:
            return bind(
                functionApply(
                    ObjectPrototypeToString,
                    ref,
                    []),
                displayName);
        
        default:
            return just(t + '');
        }
    });


}