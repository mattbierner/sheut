/**
 * @fileOverview
 */
package (
// Program Context
    context,
    
// Environment
    environment,
    getEnvironmentBindings,
    getEnvironmentOuter,
    getEnvironmentBinding,
    
// Metadata
    location,
    
// Stack
    stack,
    getStackFrameName)
with
    import 'atum/compute' compute#{bind, just},
    import 'atum/context/environment' {ObjectLexicalEnvironment},
    import 'atum/semantics/expression' {logicalOr},
    import 'atum/operations/environment' environment_ops#{getEnvironment},
    import 'atum/operations/execution_context' execution_context,
    import 'atum/operations/internal_reference' internal_reference,
    import 'atum/operations/object' object,
    import 'atum/operations/string' string,
    import 'sheut/operations/reference' {getFrom, getValue},
    import 'atum/operations/type_conversion' {toString},
    
    import 'hamt' hamt
in {

/* Program Context
 ******************************************************************************/
/**
 * Get the execution context.
 */
context = execution_context.context;

/* Environment
 ******************************************************************************/
/**
 * Get the environment object,
 */
environment = getFrom(getEnvironment);

/**
 * Get a mapping for the bindings for an environment.
 */
getEnvironmentBindings = \env ->
    bind(getValue(env), \env#{record} ->
        ?env instanceof ObjectLexicalEnvironment
            :compute.bind(getValue(record), \obj -> just(hamt.pairs(obj.properties)))
            :just(hamt.pairs(record)));

/**
 * Get a mapping for the bindings for an environment.
 */
getEnvironmentOuter = \env ->
    bind(getValue(env), \{outer} -> just(outer));

/**
 * Get a mapping for the bindings for an environment.
 * 
 * @param env
 * @param name
 */
getEnvironmentBinding = internal_reference.getFrom <<\ environment_ops.getEnvironmentBinding;

/* Metadata
 ******************************************************************************/
var _extractMetadata = \f ->
    execution_context.extract(\ctx ->
        f(ctx.metadata));

/**
 * Get the current location.
 */
location = _extractMetadata(\m -> m.loc);

/* Stack
 ******************************************************************************/
/**
 * Get the current stack.
 */
stack = _extractMetadata(\m -> m.stack);

/**
 * Get a display name for a stack frame.
 */
getStackFrameName = let
    anon = string.create('[Anonymous Function]')
in
    \frame{func} ->
        compute.branch(object.hasProperty(func, 'name'),
            logicalOr(
                compute.bind(
                    object.get(func, 'name'),
                    toString),
                anon),
            anon);

}