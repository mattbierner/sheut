/**
 * @fileOverview
 */
package (
// Program Context
    context
    
// Environment
    environment
    getEnvironmentBindings
    getEnvironmentOuter
    getEnvironmentBinding
    
// Metadata
    location
    
// Stack
    stack)
with
    import 'atum::compute' {bind just},
    import 'atum::context::environment' {ObjectLexicalEnvironment},
    import 'atum::semantics::expression' {logicalOr},
    import 'atum::operations::environment' environment_ops#{getEnvironment},
    import 'atum::operations::execution_context' execution_context#{
        extract},
    import 'atum::operations::internal_reference' internal_reference,
    import 'atum::operations::object' object,
    import 'atum::operations::string' string,
    import 'sheut::operations::reference' {
        dereference
        getFrom},
    import 'atum::operations::type_conversion' {toString},
    
    import 'hamt' hamt
in {

/* Program Context
 ******************************************************************************/
/**
 * Get the execution context.
 */
context = execution_context.context;

/* Environment
 ******************************************************************************/
/**
 * Get the environment object,
 */
environment = getFrom getEnvironment;

/**
 * Get a mapping of the bindings in an environment.
 */
getEnvironmentBindings = let
    buildObj := \pairs ->
        pairs.reduce(
            \p c -> { p.(c.(0)) = c.(1); return p; },
            {})
in \env ->
    dereference @ env \ env#{record} ->
        ?env instanceof ObjectLexicalEnvironment
            :dereference @ record \ obj -> just(obj.properties)
            :just buildObj(hamt.pairs(record));

/**
 * Get a mapping for the bindings for an environment.
 */
getEnvironmentOuter = \env ->
    dereference(env, (.outer) \> just);

/**
 * Get a mapping for the bindings for an environment.
 * 
 * @param env
 * @param name
 */
getEnvironmentBinding = internal_reference.getFrom <<\ environment_ops.getEnvironmentBinding;

/* Metadata
 ******************************************************************************/
var _extractMetadata = \f ->
    extract \ ctx ->
        f(ctx.metadata);

/**
 * Get the current location.
 */
location = _extractMetadata (.loc);

/* Stack
 ******************************************************************************/
/**
 * Get the current stack.
 */
stack = _extractMetadata (.stack);

}