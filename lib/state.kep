/**
 * @fileOverview Debugger State object and operations.
 */
package (
    Debugger

    isComplete
    getResult
    
    setBreakpoint
    addBreakpoint
    removeBreakpoint)
with
    import 'bes::record' record,
    import 'bes::object' {
        deleteProperty
        setProperty},
    
    import 'sheut::debug_state' debug_state
in {

/* Debugger
 ******************************************************************************/
/**
 * Debugger State.
 * 
 * @param debug Debug session.
 * @param breakpoints Map of ids to active breakpoints.
 */
Debugger = record.declare(null, [
    'debug',
    'breakpoints']);

Debugger.initial = Debugger.create(null, {});

/* Operations
 ******************************************************************************/
/**
 * 
 */
isComplete = \d ->
    (d.debug && debug_state.isComplete(d.debug));

/**
 * 
 */
getResult = \d ->
    ?d.debug && d.debug.complete
        :d.debug.k
        :null;

/* Breakpoint Operations
 ******************************************************************************/
/**
 * Set a breakpoint.
 * 
 * Overwrites any breakpoint already registered with the given id.
 * 
 * @param d Debug state.
 * @param id Unique id for breakpoint.
 * @param breakpoint Breakpoint object.
 */
setBreakpoint = \d id breakpoint ->
    d.setBreakpoints(
        setProperty(d.breakpoints, id, breakpoint, true));

/**
 * Register a breakpoint.
 * 
 * @see setBreakpoint
 */
addBreakpoint = setBreakpoint;

/**
 * Unregister a breakpoint.
 * 
 * @param d Debug state.
 * @param id Unique id for breakpoint.
 */
removeBreakpoint = \d id ->
    d.setBreakpoints(
        deleteProperty(d.breakpoints, id));

}