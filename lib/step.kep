/**
 * @fileOverview Operations for stepping through programs.
 */
package (
// Base Steps
    next,
    nextWhile,
    
// Stepping
    step,
    stepNextLine,
    stepTo,
    finish,
    run,
    stepOver,
    stepOut,
    
// Step Combinators
    sequencea,
    sequence)
with
    import 'atum/compute/tail' {trampoline},
    import 'sheut/semantics/debug/debuggable' {Debuggable},
    
    import 'sheut/debug_state' {DebugState, isComplete},
    import 'sheut/fun' {foldl, args},
    import 'sheut/policy' policy {notComplete, not, and, all, or, any, sameLine}
in {

/* Policies
 ******************************************************************************/
var abrupt = policy.any(
    policy.debuggerDgr,
    policy.breakpoint);

/* Basic Operations
 ******************************************************************************/
var nextContext = \s ->
    (isComplete(s) ? s :
        let c = trampoline(s.k(null, s.ctx)) in
            DebugState.create(c, c.k, c.ctx, false));

/**
 * Perform a single step to the next debuggable in the program.
 * 
 * @param d Debugger.
 */
next = \d ->
    d.setDebug(nextContext(d.debug));

/**
 * Step while `policy` is satisfied.
 * 
 * @param policy
 * @param d Debugger.
 */
nextWhile = \policy, d -> {
    var n = d;
    var c, previous;
    do {
        previous = c;
        c = next(n);
        n = policy(d, c, previous);
    } while (n);
    return c;
};

/* Stepping Operations
 ******************************************************************************/
/**
 * Perform a single step to the next statement in the program.
 * 
 * This will hit whatever the next statement is, including inside functions.
 */
step = (nextWhile,
    and(
        notComplete,
        not <| policy.statementDgr));

/**
 * Perform a single step to the next line in the program in a block of statements.
 * 
 * Will hit debug points and function calls, even on the same line.
 * 
 */
stepNextLine = (nextWhile,
    all(
        notComplete,
        sameLine,
        any(
            not <| policy.statementDgr,
            policy.depthEq),
        not <| abrupt));

/**
 * Step to completion.
 */
finish = (nextWhile,
    notComplete);

/**
 * Step until debugger statement or breakpoint is hit.
 */
run = (nextWhile,
    all(
        notComplete,
        not <| abrupt));

/**
 * Step over a function call.
 * 
 * Will also stop for breakpoints and debugger statements even if these occur
 * inside of the stepped over function.
 */
stepOver = (nextWhile,
    all(
        notComplete,
        any(
            policy.depthGt,
            not <| policy.statementDgr),
        not <| abrupt));

/**
 * Step out of a function call.
 * 
 * Will also stop for breakpoints and debugger statements even if these occur
 * inside of the stepped over function.
 * 
 * Unlike step over, this does not step to the next statement, so expression
 * with multiple function calls can step into each function.
 */
stepOut = (nextWhile,
    all(
        notComplete,
        policy.depthGte,
        not <| abrupt));

/* Step Combinators
 ******************************************************************************/
/**
 * Perform one or more stepping operations in sequence left to right, returning
 * the result from the last.
 * 
 * @param steps Array of step operations.
 */
sequencea = \steps ->
    \d ->
        foldl(
            \p, c -> c(p),
            d,
            steps);

sequence = args \>> sequencea;

}