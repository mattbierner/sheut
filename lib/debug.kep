/**
 * @fileOverview Beginning and running a debug session
 */
package (
    initialize,
    
    debug,
    debugInitial,
    
    beginInitial,
    begin,
    
    beginInitialProgram,
    beginProgram,
    
    beginInitialInput,
    beginInput)
with
    import 'atum/compute' compute{sequence, computeContext},
    import 'atum/compute/context' {ComputeContext},
    import 'atum/compute/statement' statement,
    import 'atum/compute/program' program,
    import 'atum/interpret' interpret,
    import 'atum/operations/evaluation' {evaluateText},
    import 'atum/builtin/impl/global' global,
    import 'atum/builtin/operations/global' globalOps,
    
    import 'ecma/parse/parser' {parse},
    
    import 'sheut/interpreter/semantics' semantics,
    import 'sheut/interpreter/debuggable' {CompleteDebuggable},

    import 'sheut/debug_state' {DebugState},
    import 'sheut/state' {Debugger}
in {

var memo = \f -> {
    var val;
    return \args(...) -> {
        if (val !== undefined)
            return val;
        val = f.apply(null, args);
        return val;
    };
};

var ret = \x -> x;
var thr = \x -> { throw x; };


/**
 * Debug an existing computation.
 * 
 * Directly returns result of callbacks instead of debugger.
 * 
 * @param p Computation.
 * @param ctx Computation context.
 * @param ok Success callback.
 * @param err Error callback.
 * 
 * @return Debugger object.
 */
var execute = \d, p, ctx, ok, err ->
    d.setDebug(
        DebugState.create(
            null,
            \-> interpret.exec(p, ctx, ok, err),
            ctx,
            false));

/* Initialization
 ******************************************************************************/
var globalContext;

var sm = {
    'sourceElements': semantics.sourceElements
};

/**
 * 
 */
initialize = memo <| \custom ->
    interpret.exec(
        sequence(
            global.initialize(),
            globalOps.enterGlobal(),
            compute.modifyContext(\ctx -> ctx.setSemantics(sm)),
            custom || compute.empty,
            computeContext),
        ComputeContext.empty,
        \x -> { globalContext = x; return x; },
        thr);

var getGlobalContext = \-> {
    if (!globalContext)
        return initialize();
    return globalContext;
};

/* Running
 ******************************************************************************/
/**
 * Debug an existing computation.
 * 
 * @param d Debugger state.
 * @param p Computation.
 * @param ctx Computation context.
 * @param [ok] Success callback.
 * @param [err] Error callback.
 * 
 * @return Debugger object.
 */
debug = \d, p, ctx, ok, err -> let
    suc = (ok || ret),
    fail = (err || thr),
    pok = \x, ctx ->
        CompleteDebuggable.create(suc(x, ctx), ctx),
    perr = \x, ctx ->
        CompleteDebuggable.create(fail(x, ctx), ctx)
in
    execute(
        d,
        p,
        ctx,
        pok,
        perr);

/**
 * Debug an existing computation in a new debugger state.
 * 
 * @see debug
 */
debugInitial = \p, ctx, ok, err ->
    debug(
        Debugger.initial,
        p,
        ctx,
        ok,
        err);

/**
 * Start debugging a program in the global context.
 * 
 * @param d Debugger context.
 * @param p Computation to debug.
 * 
 * @see debug
 */
begin = \d, p, ok, err ->
    debug(
        d,
        p,
        getGlobalContext(),
        ok,
        err);

/**
 * Start debugging a program in a new debugger context.
 * 
 * @param p Computation to debug.
 * 
 * @see debug
 */
beginInitial = \p, ok, err ->
    debug(
        Debugger.initial,
        p,
        getGlobalContext(),
        ok,
        err);

/**
 * Start debugging a program in the global context.
 * 
 * @param prog Program AST.
 * 
 * @see begin
 */
beginProgram = \d, {body}, ok, err ->
    begin(
        d,
        semantics.programBody(
            semantics.sourceElements(body)),
        ok,
        err);

/**
 * Start debugging a program in the global context.
 * 
 * @param prog Program AST.
 * 
 * @see begin
 */
beginInitialProgram = \prog, ok, err ->
    beginProgram(
        Debugger.initial,
        prog,
        ok,
        err);

/**
 * Parse a program and start debugging it in the global computation context
 * 
 * @param d Debug context.
 * @param {String} text Input string.
 * @param [ok] Success completion.
 * @param [err] Error completion.
 * 
 * @see begin
 */
beginInput = \d, text, ok, err ->
    begin(
        d,
        evaluateText(text),
        ok,
        err);

/**
 * Parse a program and start debugging it in a new debug context.
 * 
 * @see beginInput
 */
beginInitialInput = \text, ok, err ->
    beginInput(
        Debugger.initial,
        text,
        ok,
        err);

}