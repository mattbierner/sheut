/**
 * @fileOverview Operations for stepping through programs.
 */
package (
    always,
    never,
    notComplete,
    
    not,
    and,
    or,
    all,
    any,
    
    breakpoint,
    
    depthGt,
    depthGte,
    depthEq,
    
    debuggerDgr,
    statementDgr,
    
    line,
    sameLine)
with
    import 'sheut/interpreter/debuggable' debuggable,

    import 'sheut/fun' {foldl, foldr, map, args, identity, constant},
    import 'sheut/run' {extract},
    import 'sheut/operations/context' context
in {

/* Location Operations
 ******************************************************************************/
var containsLine = \location, line ->
    (location.start.line <= line && line <= location.end.line);


/* Basic Policies
 ******************************************************************************/
always =  \_, next, _ -> next;

never = \_, _, _ -> null;

var testNext = \f ->
    \_, next ->
        f(next.debug) ? next : null;

notComplete = testNext(\d -> !d.complete);

/* Policy Combinators
 ******************************************************************************/
/**
 * 
 */
not = \p -> (p \>>(!));

/**
 * 
 */
var binary = \f ->
    \a, b ->
        \current, next, previous ->
            f(a(current, next, previous), b(current, next, previous)) ? next : null;
    
/**
 * Are two policies both satisfied?
 */
and = binary((&&));

/**
 * Are either of two policies satisfied.
 */
or = binary((||));

/**
 * Are all of the policies satisfied.
 * 
 * @param arr Array of policies
 */
var alla = (foldl, and, always);

/**
 * Are all of the policies, passed as arguments, satisfied.
 */
all = args \>> alla;

/**
 * Are any of the policies satisfied.
 * 
 * @param arr Array of policies.
 */
var anya = (foldl, or, never);

/**
 * Are any of the policies, passed as arguments, satisfied.
 */
any = args \>> anya;

/* Breakpoint Policies
 ******************************************************************************/
/**
 * 
 */
breakpoint = \current{breakpoints}, next, previous ->
    anya(
        map(
            \b -> breakpoints[b].test.bind(b),
            Object.keys(breakpoints)))(current, next, previous);

/* Depth Policies
 ******************************************************************************/
var testDepth = \pred ->
    \current, next -> 
        pred(current.debug.depth, next.debug.depth);

/**
 * Next depth is greater than current depth.
 */
depthGt = testDepth((<));

/**
 * Next depth is greater than or equal to current depth.
 */
depthGte = testDepth((<=));

/**
 * Next depth is the same as current depth.
 */
depthEq = testDepth((===));

/* Kind Policies
 ******************************************************************************/
var testDgr = \pred ->
    \_, next ->
        pred(next.debug.dgr);

var dgrInstanceof = \kind ->
    testDgr(\dgr -> dgr instanceof kind);

debuggerDgr = dgrInstanceof(debuggable.DebuggerDebuggable);

statementDgr = dgrInstanceof(debuggable.StatementDebuggable);

var callDgr = or(
    dgrInstanceof(debuggable.PreCallDebuggable),
    dgrInstanceof(debuggable.PostCallDebuggable));

/* Location
 ******************************************************************************/
/**
 * Next location contains `line`
 */
line = \line ->
    \_, next ->
        extract(next, context.location, false,
            \nextLocation ->
                containsLine(nextLocation, line));

        /*
var location = \loc ->
    \_, next ->
        extract(next, context.location, false,
            \nextLocation ->
                containsLocation(loc, nextLocation));
*/
        
sameLine = \current, next ->
    extract(current, context.location, false,
        \currentLocation ->
            extract(next, context.location, false,
                \nextLocation ->
                    (currentLocation && nextLocation && containsLine(currentLocation, nextLocation.start.line))));

}