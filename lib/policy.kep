/**
 * @fileOverview Operations for stepping through programs.
 */
package (
    test
    always
    never
    notComplete
    
    not
    and
    or
    all
    any
    
    breakpoint
    
    depthGt
    depthGte
    depthEq
    
    debuggerDgr
    statementDgr
    abrupt
    
    line
    sameLine)
with
    import 'sheut/interpreter/debuggable' debuggable,

    import 'sheut/fun' {
        foldl
        foldr
        map
        args
        identity
        constant},
    import 'sheut/run' {extract},
    import 'sheut/operations/context' context
in {

/* Location Operations
 ******************************************************************************/
var containsLine := \location, line ->
    (location.start.line <= line && line <= location.end.line);

/* Test Policies
 ******************************************************************************/
test := \pred -> 
    \start current previous ->
        [pred(start, current, previous), current];

always :=  \_ current _ -> [true, current];

never := \_ current _ -> [false, current];

var testNext := \pred ->
    test \ _ current ->
        pred(current.debug);

notComplete := testNext \d -> !d.complete;

/* Policy Combinators
 ******************************************************************************/
/**
 * 
 */
not := \p ->
    \start, current, next ->
        let x = p(start, current, next) in [!x.(0), x.(1)];

/**
 * 
 */
var binary := \f ->
    \a b ->
        \start current previous -> let
            x = a(start, current, previous),
            y = b(start, current, previous)
        in
            [f(x.(0), y.(0)), current];

/**
 * Are two policies both satisfied?
 */
and := binary((&&));

/**
 * Are either of two policies satisfied.
 */
or := binary((||));

/**
 * Are all of the policies satisfied.
 * 
 * @param arr Array of policies
 */
var alla := foldl @ and @ always;

/**
 * Are all of the policies, passed as arguments, satisfied.
 */
all := args \>> alla;

/**
 * Are any of the policies satisfied.
 * 
 * @param arr Array of policies.
 */
var anya := foldl @ or @ never;

/**
 * Are any of the policies, passed as arguments, satisfied.
 */
any := args \>> anya;

/* Breakpoint Policies
 ******************************************************************************/
/**
 * 
 */
breakpoint := \current#{breakpoints} next previous ->
    anya(
        map(
            \b -> breakpoints.(b).test.bind(b),
            Object.keys(breakpoints)))(current, next, previous);

/* Depth Policies
 ******************************************************************************/
var testDepth := \pred ->
    test \ current next -> 
        pred(current.debug.depth, next.debug.depth);

/**
 * Next depth is greater than current depth.
 */
depthGt := testDepth((<));

/**
 * Next depth is greater than or equal to current depth.
 */
depthGte := testDepth((<=));

/**
 * Next depth is the same as current depth.
 */
depthEq := testDepth((===));

/* Kind Policies
 ******************************************************************************/
var testDgr := \pred ->
    test \ _ next ->
        pred(next.debug.dgr);

var dgrInstanceof := \kind ->
    testDgr \ dgr -> dgr instanceof kind;

debuggerDgr := dgrInstanceof(debuggable.DebuggerDebuggable);

statementDgr := dgrInstanceof(debuggable.StatementDebuggable);

var callDgr := or(
    dgrInstanceof(debuggable.PreCallDebuggable),
    dgrInstanceof(debuggable.PostCallDebuggable));

/* Policies
 ******************************************************************************/
abrupt := any(
    debuggerDgr,
    breakpoint);

/* Location
 ******************************************************************************/
/**
 * Next location contains `line`
 */
line := \line ->
    test(\_, next ->
        extract(next, context.location, false,
            \nextLocation ->
                containsLine(nextLocation, line)));

/*
var location := \loc ->
    \_, next ->
        extract(next, context.location, false,
            \nextLocation ->
                containsLocation(loc, nextLocation));
*/
        
sameLine := test(\current, next ->
    extract(current, context.location, false,
        \currentLocation ->
            extract(next, context.location, false,
                \nextLocation ->
                    (currentLocation && nextLocation && containsLine(currentLocation, nextLocation.start.line)))));

}